let mongoose,bcrypt;_b69‍.x([["default",()=>_b69‍.o]]);_b69‍.w("mongoose",[["default",["mongoose"],function(v){mongoose=v}]]);_b69‍.w("bcrypt",[["default",["bcrypt"],function(v){bcrypt=v}]]); 
 
const { Schema } = mongoose

const userSchema = new Schema({
    name: {
        type: String,
        trim: true, 
        required: 'Name is required'
    },
    email: {
        type: String,
        trim: true, 
        required: 'Email is required',
        unique: true
    },
    password: {
        type: String, 
        required: true, 
        min: 6, 
        max: 64
    },
    stripe_account_id: '',
    stripe_seller: {},
    stripeSession: {}
}, { timestamps: true }) 


// hashing 
userSchema.pre('save', function(next) {
    let user = this;
    if(user.isModified('password')) {
        return bcrypt.hash(user.password, 12, function (err, hash) {
            if(err) {
                _b69‍.g.console.log('BCRYPT HASH ERR', err);
                return next(err); 
            }
            user.password = hash;
            return next();
        });
    } else {
        return next(); 
    }
})

_b69‍.d(mongoose.model('User', userSchema));